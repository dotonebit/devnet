With the Requests library, developers can send HTTP requests easily.
The Requests library is not a standard library, which means that it does not come natively with a Python installation.

Example:

import json
import requests   
from requests.auth import HTTPBasicAuth
requests.packages.urllib3.disable_warnings() 

auth = HTTPBasicAuth('ciscoâ€™, 'cisco')
headers = {'Accept': 'application/yang-data+json',
            'Content-Type': 'application/yang-data+json' }

url = 'https://csr1v1/restconf/data/Cisco-IOS-XE-native:native'

response = requests.get(url, headers=headers, auth=auth, verify=False)


Three key variables have been defined for data that is required for an API call: 
- the URL (identifies the data that you want) 
- credentials (identifies how you plan to authenticate) 
- headers (although sometimes optional, the Accept header dictates how you want to receive data)

The syntax components are explained as follows:
- response: This component is a variable name, which will hold the returned data from the requested device.
- requests: This component is the Python library that helps make the request.
- get: This component is the Requests function. Requests also supports the functions put, patch, delete, and post functions. 
  Each has a special purpose when interacting with the REST API. 
  The following arguments are supplied to the get method:
  - url: This argument refers to the URL against which the request will be made.
  - auth: This argument uses basic authentication to authenticate with the device and make the request.
  - headers: This argument defines the headers of the request.
  - verify: This argument forces verification of the Secure Sockets Layer (SSL) certificate when it is set to True, and ignores it when set to False. 
    Use the False option only in a development environment.
    
    
