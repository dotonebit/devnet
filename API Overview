The core components of the complete device API include the following:
- Data models: Data models define the syntax and semantics, including the constraints of working with the API.
- Transport: Model-driven APIs support several transport methods, including SSH, TLS, HTTP and HTTPS.
- Encoding: Model-driven APIs support the choice of encoding, including XML and JSON, but also custom encodings such as Google protocol buffers.
- Protocols: Model-driven APIs also support multiple options for protocol, with the three core protocols being NETCONF, RESTCONF, and gRPC. 
  Remember, they are the core protocols that work with model-driven APIs. REST is not explicitly listed because when REST is used in a modeled device, it becomes RESTCONF.
  
  
HTTP-Based APIs
---------------

(client) HTTP GET ----> (web server)
(client) <----- HTML (web server)

(client) HTTP GET ----> (router)
(client) JSON and XML <----- (router)

When using REST APIs, you still have a client (various options including web browser plug-ins), 
which performs HTTP operations (for example, GET) to a network device running a web server. 
The network device understands the request based on the URL (and body) and 
returns JSON- or XML-encoded objects so that your client can properly consume them.

REST commonly uses HTTP methods such as GET, POST, PUT, PATCH, and DELETE.

To make a REST API call, you need the following:
1. HTTP: The HTTP method (or verb) is required.
2. URL: The full URL is needed to manage a given resource.
3. Body: The body is needed to make certain changes (optional).
4. Headers: Two common headers that HTTP APIs use are Content-Type and Accept. These headers are how the server knows what to expect from your HTTP and what to send back. For example, do you want XML or JSON? Are you sending XML or JSON?
5. Authentication: Basic authentication (username:password) or tokens are popular methods of authentication using REST APIs.


HTTP Methods
------------
GET: GET is used to read or retrieve information from a resource that returns a representation of the data in JSON or XML.
POST: POST creates new resources.
PUT: PUT is normally used to update or replace a current resource and involves sending a request with the updated representation of the original resource.
PATCH: PATCH is similar in some ways to PUT because PATCH modifies the capabilities of a resource. 
The difference between PUT and PATCH is that PATCH sends a request containing only the changes to the resource and not a completely updated resource.
DELETE: DELETE simply deletes a resource that a Uniform Resource Identifier (URI) identifies.

When an HTTP method is used, a certain response code is returned depending on the outcome.

Examples of response codes include the following:
1xx: Informational
2xx: Success
3xx: Redirection
4xx: Client Error
5xx: Server Error


RESTful APIs vs. Non-RESTful APIs
---------------------------------
REST = REpresentational State Transfer

There are six design constraints to which an API must conform to be considered a REST API.
Three of the constraints help in understanding REST within the network device API context:
- Client/server
- Stateless
- Uniform interface

The separation of the client and server resources permits portability and changeability of client applications without changing the server components.
Clients who use stateless forms of communication must send all the data required for the server to understand and perform the requested operation in a single request.
Individual resources within an API call are identified in an HTTP request message. For example, in RESTful HTTP-based systems, the URL used will reference a particular resource. 
In the context of networking, the resource maps to a network device construct such as 
a hostname, interface, routing protocol configuration, or another resource that exists on the device.

is not necessary, it is common for RESTful APIs to use HTTP as their transport protocol. 
Technically, it is possible to implement REST with non-HTTP transport protocols, but most modern network APIs use HTTP for transport.
Understanding HTTP basics helps you understand RESTful network APIs. 

RESTCONF is an example of RESTful API implementation on the Cisco IOS XE Software platform. 
RESTCONF is a robust API that uses XML or JSON encoded data to represent data that YANG data models define.

In the context of working with a network device and also depending on the device, 
you would GET and retrieve configuration data, and when making changes, you would POST to make configuration changes.

Using certain HTTP verbs, REST supports the create, read, update, and delete (CRUD) operations. 
CRUD refers to the four major functions that are implemented in database applications.
These operations are used with the URL and payload.

It is important to understand that not all APIs that use HTTP for transport are considered RESTful. 
When an API does not conform to RESTful definitions, it is considered non-RESTful, regardless of the transport protocol.
APIs that do not implement REST principles are called non-RESTful APIs.
In the networking industry, non-RESTful APIs are most commonly seen as APIs that implement CLI commands, 
which means that the API sends a command to the device instead of sending structured data.
